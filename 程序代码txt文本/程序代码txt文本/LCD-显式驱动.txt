//**********************  pcimain.cpp *************************************

#include "nkckdef.h"

extern HANDLE  hhandle;   
extern SOURCEDATA source;  
#include "math.h"

GUID ClassGuid = PcinkckDevice_CLASS_GUID;

 #define PORT_A  0x7d00
 #define CTRL    0x7d03
 #define E0      0x0
 #define E1      0x1
 #define RW0     0x2
 #define RW1     0x3
 #define RS0     0x4
 #define RS1     0x5
long int i,j; 

void chkbusy(void )
{ unsigned char temp;
  io_write(CTRL,0x90); // 初始化8255A，A口入，B口出，C低4位口出
 do
  {io_write(CTRL,RS0);
   io_write(CTRL,RW1);
   io_write(CTRL,E1);
   for (i=0;i<1000;i++); 
   temp=io_read(PORT_A);
   io_write(CTRL,E0);
   io_write(CTRL,E1);
   io_write(CTRL,E0);
  } while((temp&0x80));
  io_write(CTRL,0x80); // 初始化8255A，A口出，B口出，C低4位口出
}

void wrcmd(unsigned char cmd1 )
{     
  chkbusy(); 
  io_write(PORT_A,cmd1);
  io_write(CTRL,RS0);
  io_write(CTRL,RW0);
  io_write(CTRL,E1);
  io_write(CTRL,E0);
  for(i=0;i<100;i++);
}
void wrdata(unsigned char data1 )
{ chkbusy(); 
  io_write(PORT_A,data1);     
  io_write(CTRL,RS1);
  io_write(CTRL,RW0);
  io_write(CTRL,E1);
  io_write(CTRL,E0);
  for(i=0;i<1000;i++);
}


main()
{
	HANDLE hDevice = GetDeviceViaInterface((LPGUID)&ClassGuid,0);
	if( hDevice==NULL) { printf(" FAILED: Could not open PCInkck device\n");
		            return 1;}
	printf("Device found, handle open.\n");
    hhandle=hDevice;
   
	//根据需要定义局部变量
        
      io_write(CTRL,0x80); // 初始化8255A，A口出，B口出，C低4位口出
      
      io_write(PORT_A,0x30);     
      io_write(CTRL,RS0);
      io_write(CTRL,RW0);
      io_write(CTRL,E1);
	  io_write(CTRL,E1);
      io_write(CTRL,E0);
      for(i=0;i<1000;i++);

     
      //wrcmd(0x28);
      wrcmd(0x01);
      wrcmd(0x06);
      wrcmd(0x0e);
	  wrcmd(0x80);
      
	  wrdata('a');
	  wrdata('b');
	  wrdata('c');
          wrdata('d');
	  wrdata('e');
	  wrdata('f');



 
    printf("\n**************************************\n");
    printf("\n按回车键，程序结束运行。 \n");
    getchar();  

	//以下两行用于关闭设备和结束运行
	CloseIfOpen();
    return 0;
}
 
